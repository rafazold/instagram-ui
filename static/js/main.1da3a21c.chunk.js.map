{"version":3,"sources":["Header/Header.js","Feed/Post/Engage/Engage.js","Feed/Post/Tags/Tag/Tag.js","Feed/Post/Tags/Tags.js","Feed/Post/Header/User/User.js","Feed/Post/Header/Header.js","Feed/Post/Post.js","Feed/Feed.js","Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Component","Engage","icon","faHeart","size","this","props","likes","faComment","faShare","faCloudDownloadAlt","Tag","children","Tags","tags","map","tag","User","faUser","creationDate","toLocaleString","month","day","year","Post","Date","datePosted","src","title","Feed","state","posts","fetch","then","res","json","setState","post","image","created","Profile","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1da3a21c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Header.scss\"\nimport {Link} from 'react-router-dom';\n\nclass Header extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"#\">Instagram</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\n                        </li>\n                        <li className=\"nav-link\">\n                            <Link to=\"/profile\" href=\"#\">Profile</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n        );\n    }\n}\n\nexport default Header;\n\n\n{/*<header className=\"Header\">*/}\n{/*    Instagram*/}\n{/*</header>*/}","import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCloudDownloadAlt, faShare } from '@fortawesome/free-solid-svg-icons';\nimport { faHeart, faComment } from '@fortawesome/free-regular-svg-icons';\n\nimport \"./Engage.scss\"\n\nclass Engage extends Component {\n    render() {\n        return (\n            <section className=\"engage\">\n                <div className=\"engageButtons\">\n                    <button className=\"likeButton\"><FontAwesomeIcon icon={faHeart} size=\"1x\" /></button>\n                    <span className=\"likesCount\">{this.props.likes}</span>\n                    <button className=\"commentButton\"><FontAwesomeIcon icon={faComment} size=\"1x\" /></button>\n                    <button className=\"shareButton\"><FontAwesomeIcon icon={faShare} size=\"1x\" /></button>\n                    <button className=\"saveButton\"><FontAwesomeIcon icon={faCloudDownloadAlt} size=\"1x\" /></button>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Engage;","import React, {Component} from 'react';\nimport \"./Tag.scss\";\n\nclass Tag extends Component {\n    render() {\n        return (\n            <span className=\"tag\">\n                #{this.props.children}\n            </span>\n        );\n    }\n}\n\nexport default Tag;","import React, {Component} from 'react';\nimport Tag from \"./Tag/Tag\";\nimport \"./Tags.scss\";\n\nclass Tags extends Component {\n    render() {\n        // const tags = {this.props.tags};\n        return (\n            <div className=\"tags\">\n                {this.props.tags.map(tag => {\n                    return <span>\n                        <Tag>\n                            {tag}\n                        </Tag>\n                    </span>\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Tags;","import React, {Component} from 'react';\nimport \"./User.scss\"\nimport {faGrinAlt, faUser} from '@fortawesome/free-regular-svg-icons';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n\n\nclass User extends Component {\n    render() {\n        return (\n            <div className=\"user-details\">\n                <FontAwesomeIcon className=\"user-icon\" icon={faUser} size=\"2x\" />\n                {/*<img src={this.props.src}/>*/}\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default User;","import React, {Component} from 'react';\nimport \"./Header.scss\"\nimport User from \"./User/User\";\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"post-header\">\n                <User>USER DETAILS</User>\n                <div className=\"post-date\">{this.props.creationDate.toLocaleString(\"en-US\", { month: 'short', day: 'numeric', year: 'numeric', })}</div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport \"./Post.scss\";\nimport Engage from \"./Engage/Engage\";\nimport Tags from \"./Tags/Tags\";\nimport Header from \"./Header/Header\";\n\n\nclass Post extends Component {\n    render() {\n        return (\n            <article className=\"post\">\n                <Header creationDate={new Date(this.props.datePosted * 1000)} />\n                <div className=\"post-image\">\n                    <img src={this.props.src}/>\n                </div>\n                <Engage likes={ this.props.likes}/>\n                <div className=\"post-content\">\n                    <h1 className=\"post-title\">{this.props.title}</h1>\n                    <Tags tags={this.props.tags} />\n                </div>\n            </article>\n        );\n    }\n}\n\nexport default Post;","import React, {Component} from 'react';\nimport \"./Feed.scss\";\nimport Post from \"./Post/Post\";\n\n\nclass Feed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://my-json-server.typicode.com/evyros/fake-api/posts\")\n            .then(res => res.json())\n            .then(posts => {\n                this.setState({posts});\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"feed\">\n                {this.state.posts.map(post => {\n                    return <div className=\"post-wrapper\">\n                        <Post title={post.title} src={post.image} likes={post.likes} datePosted={post.created} tags={post.tags}/>\n                    </div>\n                })}\n            </div>\n        );\n    }\n}\n\n\nexport default Feed;","import React, {Component} from 'react';\n\nclass Profile extends Component {\n    render() {\n        return (\n            <div>\n                Profile\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header/Header\";\nimport Feed from \"./Feed/Feed\";\nimport Profile from \"./Profile/Profile\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n      <Router>\n          <div className=\"App\">\n              <Header/>\n              <main className=\"container\">\n                  <Switch>\n                      <Route path=\"/profile\">\n                          <Profile />\n                      </Route>\n                      <Route path=\"/\">\n                          <Feed/>\n                      </Route>\n                  </Switch>\n              </main>\n          </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}